<HTML>
<HEAD>
<TITLE>Matt Johnson's TI-86 Z80 Asm Tutorial - Part I - The Basics</TITLE>
<META NAME="keywords" CONTENT="memory, mem, rom, ram, swapped, static, TI-86,TI86,Z80,zilog,asm,assembly,programming,coding,graphic,calculator,TI,Texas Instruments,games,programs,software,docs,faq,tutorials,tutors,articles,links,tools,IDE,emulate,emulators,LCD,display,keypad,link,link port,David Phillips">
<META NAME="description" CONTENT="86 Central - Brief tutorial on the memory and how it works on the TI-86.">

</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000ff">

<FONT FACE="Comic Sans MS"><P ALIGN="CENTER">-[ Memory ]-</P>
</FONT>


<FONT FACE="Courier New" SIZE=2>
<P>It is helpful to know how memory works on the TI-86. I am now much more familiar with memory. Nevertheless, if any mistakes are present, be sure to e-mail me at: matt2000@dogtech.com</P>

<P>If you do not understand this at first, then skip this tutorial and re-read it later on. The "jargon" is intermixed through these tutorials, there is no perfect order to present this information to you.</P>

<P>The memory of the TI-86 is made up of 256K of ROM and 128K of RAM. ROM stands for Read Only Memory, and it is permanent, it can not be erased. RAM means Random Access Memory, which can be written to and erased freely. A little backup battery keeps the RAM from getting erased when you turn off your calculator or change the AAA batteries.</P>

<P>The Z80 processor can only access 16-bits of memory at a time. This is even worse then the 20-bit (1 MEG) limit on the XT. </P>

<P>2 ^ 16 = 65,535 bytes, which is the maximum addressable memory on the TI-86.</P>

<P>The TI-86 takes care of this memory limit by a paging system. This is a similar method used in expanded memory on old IBM/PC compatibles.</P>

<P>The TI-86 divides the memory into four 16K pages:</P>

</FONT><PRE>
  0000h       -------------------------
             |                         |
             |   ROM PAGE 0            |
             |                         |
  4000h      |-------------------------|
             |                         |
             |   SWAPPED ROM PAGE (1-F)|
             |                         |
  8000h      |------------------------ |
             |                         |
             |   SWAPPED RAM PAGE (1-7)|
             |                         |
  C000h      |-------------------------|
             |                         |
             |   STATIC RAM PAGE (0)   |
             |                         |
  FFFFh       -------------------------</PRE>

<FONT FACE="Courier New" SIZE=2>
<P>&nbsp;</P>
<P>Furthermore, the ROM is divided into sixteen 16K pages and the RAM is divided into eight 16K pages.

<P>The first 16K, which is from 0000h to 3FFFh, is ROM PAGE 0. This page is permanent. It contains frequently used routines. </P>

<P>The memory area from 4000h to 7FFFh is where the ROM page is swapped in. Remember, there are 15 pages that can be swapped into this area. The first ROM page (ROM PAGE 0) is permanently at 0000-3FFF, and the next 15 are swappable here at 4000 to 7FFFh.</P>

<P>The memory area from 4000h to 7FFFFh is normally set at ROM Page $D when you are running the asm program. I determined this myself using the "in" instruction on port $05 and displaying the result with $4A33</P>

<P>Rom Page $D is special. This is the location of the "call table". Now what is special about the call table is that when you call a routine (assuming you are at rom page $D, which it starts out at), such as _puts, then it calls address $4A37. $4A37 then changes the ROM page, calls the routine which is in another section of the ROM, and switches you back to the original rom page.</P>

<P>This saves you the trouble of having to worry about switching ROM pages all the time. There are at least 1500 ROM calls present in this "call table".</P>

<P>Also, if you do not use the "call table", then you are at risk with incompatibility between ROM versions. As Texas Instruments changes the ROM (for additions, corrections, ect), then the location of the ROM routines may change. But the location of the routines in the call table stays the same. So it is best to use the routines available in the call table for maximum compatibility.</P>

<P>The memory area from 8000h to BFFFh is where the RAM page is swapped in. There are 7 pages of RAM that can be swapped in here. The second Ram page, (Ram Page 1) contains stacks and (executing ram?). The 3rd - 8th Ram pages contains user memory, temporary memory, temporary symbol, and user symbol able.</P>

<P>The first RAM page (RAM PAGE 0) is a permanent RAM page. This page is located between C000h and FFFFh. This page contains the system memory, cache, and the assembly program, which is stored at $D748, and there is about 10K allocated for this. Then the display memory, which is $300 bytes or 1024 bytes, is located here at $FC00 and ends at $FFFF.</P>

<P>That's not all!</P>

<P>By calling ports, RAM pages can be loaded where ROM pages are usually swapped, and ROM pages can be loaded where RAM pages are usually swapped. This may be discussed in detail when I learn more about it.</P>

<P>Also, you can use 24-bit absolute addressing to access any RAM or ROM page and without worrying about swapping RAM and ROM pages. This may be discussed in detail when I learn more about it.</P>

<P>You can determine what Rom Version you have (probably 1.2 or 1.3) with [2nd] [MODE] [ALPHA] S

<U><P>How asm programs are run on the TI-86 </P>
</U>
<P>When you run an assembly program or a call is made to an assembly program, the object code is copied to memory location $D748. Then a call is made to $D748, and then the program gets executed there. The program stops executing when the final "ret" opcode has been processed. It then returns to the calling program.</P>

</FONT><FONT FACE="Comic Sans MS"><P ALIGN="CENTER">How programs are assembled</P>
</FONT><FONT FACE="Courier New" SIZE=2>
<P>Every instruction on the Z80, and every other CPU for that matter, is really a binary number. An assembler takes all the instructions like ld, and all the extra data like strings, and converts them into binary called Object code. Object code is all the instructions and extra data converted into binary. Each instruction can be grouped into two hex digits, since two hex digits is a byte. Extra data like registers and and immediate values may make instructions longer.</P>

<P>You can actually type in assembly programs by hex code on the TI-86. My Rom Central CGI uses this ability to determine if you own a TI-86 or not.</P>

<BR>
<HR>
<p>
<center>
<script language="JavaScript" type="text/javascript">
<!--
function go(){
	if (document.selecter.select1.options[document.selecter.select1.selectedIndex].value != "none") {
		window.top.location = document.selecter.select1.options[document.selecter.select1.selectedIndex].value
	}
}
//-->
</script>
<script language="JavaScript" type="text/javascript">
<!--
document.write('<form name="selecter"><select name="select1" size=1>');
document.write('<option value=none>3rd Level Domains');
document.write('<option value=none>---------------------------------');
document.write('<option value="http://www.acz.org">ACZ Frontpage');
document.write('<option value="http://ti86.acz.org">86 Asm Central');
document.write('<option value="http://ti89.acz.org">89 Asm Central');
document.write('<option value="http://asmstudio.acz.org">Assembly Studio Site');
document.write('<option value="http://vti.acz.org">Virtual TI Emulator Site');
document.write('<option value=none>----------------------------------');
document.write('<option value="http://brett.acz.org">Brett\'s Homepage');
document.write('<option value="http://clem.acz.org">Clem\'s Homepage');
document.write('<option value="http://dave.acz.org">Dave\'s Homepage');
document.write('<option value="http://david.acz.org">David\'s Homepage');
document.write('<option value="http://dux.acz.org">Dux\'s Homepage');
document.write('<option value="http://james.acz.org">Jame\'s Homepage');
document.write('<option value="http://jeremy.acz.org">Jeremy\'s Homepage'  );
document.write('<option value="http://matt.acz.org">Matt\'s Homepage');
document.write('<option value="http://rusty.acz.org">Rusty\'s Homepage');
document.write('<option value="http://stephen.acz.org">Stephen\'s Homepage');
document.write('<option value=none>----------------------------------');
document.write('</select>');
document.write('<input type="button" value="Go" onclick="go()">');
document.write('</form>');
// end hiding contents -->
</script>
</center>

<p><center>&copy; 1998 - 1999 <A HREF="http://www.acz.org" TARGET="_TOP">ACZ</A></center>


</BODY>
</HTML>
