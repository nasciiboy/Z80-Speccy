<HTML>
<HEAD>
   <META NAME="keywords" CONTENT="Color, Grayscale, scale, shades, 4-level, 8-level, graphics, effects, TI-86,TI86,Z80,zilog,asm,assembly,programming,coding,graphic,calculator,TI,Texas Instruments,games,programs,software,docs,faq,tutorials,tutors,articles,links,tools,IDE,emulate,emulators,LCD,display,keypad,link,link port,David Phillips">
   <META NAME="description" CONTENT="86 Central - Grayscale tutorial, which allows games and programs to have multiple shades of 'color'">
   <TITLE>86 Central - Grayscale</TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000FF" VLINK="#0055FF">

<CENTER><IMG SRC="images/86Central.gif" ALT="86 Central Logo" BORDER=0 HEIGHT=76 WIDTH=301></CENTER>

<CENTER>
<H5>
Best viewed in 1024x768</H5></CENTER>

<CENTER>
<H2>
Grayscale</H2></CENTER>

<CENTER><IMG SRC="images/gsmain.gif" ALT="Grayscale animated gif" BORDER=3 HEIGHT=128 WIDTH=256></CENTER>


<P><FONT SIZE=+1>G</FONT>rayscale is a term that means "multiple shades
(scales) of gray". The TI-86 can only support two colors. This is a hardware
restriction. The memory at $FC00 is for 8-bits/pixel, each bit means 1
color, 0 or 1. This is a standard monochrome system.

<P><FONT SIZE=+1>4-level Grayscale</FONT>

<P>Grayscale is accomplished by having two 1024 byte regions. The first
region is $FC00 and the other region is $CA00. We then rapidly write bytes
to Port 0 and have the graphics viewport switch from $FC00 and $CA00. Since
we want grayscale in the background, we will be using this code in an interrupt
routine. The interrupt happens to occur 200 times per second, which is
plenty fast enough to trick our eyes into seeing greycale. Not only that,
but the LCD happens to have a slow refresh rate which causes blur, and
in this case we use the 200hz timer and the blur effect to blend both white
and dark into shades of gray.

<P>Port 0 is used to change the memory mapped region of the display. You
write a byte to Port 0 and the something goes on internally that causes
the display to get mapped at:

<P>100h * XX + C0

<P>Where XX is the byte. So if you did:
<PRE>&nbsp;ld a, 3C
&nbsp;out (0), a</PRE>
3C + C0 = FC * 100h = $FC00 (the default display area)

<P>4-level grayscale needs two bitplanes (1024 byte regions) to work with.

<P>#define BitPlane1 $3C
<BR>#define BitPlane2 $0A

<P>When $3C is written to Port 0 an address of $FC00 results. When $0A
is written to Port 0 an address of $CA00 results.

<P>Plotscreen is a free 1024 byte region to store the graph backup and
is at: 0C9FAh. Notice $CA00 is 6 bytes after $C9FA. So we will be overwriting
6 bytes of RAM that could be important after the graph memory. Other people
overwritten it without any problems. For maximum stability we probably
should save these last 6 bytes in our asm program and restore them when
the program is finished.

<P>With these two 1024 byte locations, imagine Port 0 as the eye. 200 times
per second, we are looking at BitPlane1 ($FC00) 2/3 of the time, and BitPlane2
($CA00) 1/3 of the time.
<CENTER><IMG SRC="images/gsmem1.gif" BORDER=0 USEMAP="#Grayscale memory model" HEIGHT=300 WIDTH=300></CENTER>


<P>If a pixel are written to both locations, it is the darkest (3/3). If
it is just written to $FC00, it is dark grey (2/3). If it is just written
to $CA00, is is light gray (1/3). If it isn't written to either location,
then there is no pixel, it is light (0/3). And this is how we get 4 different
shades from two bitplanes.

<P><FONT SIZE=+1>8-level Grayscale</FONT>
<BR>8-level grayscale is a similar concept. But this time we need three
1024 byte regions. We then switch between BitPlane1, 1/7 of the time, BitPlane2,
2/7 of the time, and BitPlane3, 4/7 of the time. Writing to combinations
of these three bitplanes can give you 8-level grayscale. 8-level grayscale
works OK in picture viewers, but in games it is generally too slow and
has flicker to it. Plus there are a few optimizations you can do when writing
a 4-level grayscale interrupt routine as opposed to an 8-level, which makes
the 4-level interrupt routine execute nearly twice as fast as the 8-level
routine.

<P><FONT SIZE=+1>VBL Interrupt</FONT>
<BR>When the LCD is in the middle of refreshing (drawing) the screen, bit
1 on Port 3 is clear. This is like a vertical sync type thing like they
have on the IBM's. So when you are doing grayscale, you must make sure
that bit 1 of Port 3 is set. If the bit is clear, then you immediately
exit the interrupt routine. Things get a little screwy when you try to
change the graphics viewport (port 0) while it is in the middle of refreshing
the LCD screen.

<P><FONT SIZE=+1>Passing parameters to an interrupt routine</FONT>
<BR>A neat little trick when messing with interrupts is that you can save
yourself a lot of time and optimize the interrupt handler. How? Easy! You
know how an interrupt handler uses the exx and ex af, af' instructions
to preserve the registers? Well you can set certain registers in the alternate
register set before you enable your new interrupt routine and when the
interrupt routine is ran, it will then use the exx and ex af, af' instructions
to swap the regular registers with the alternate registers. But since you
initialized the alternate registers before, the regular registers will
now contain the alternate registers, and those registers will have a preset
value! It works like this:
<PRE>&nbsp;di&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; Must disable interrupts or else the interrupts would mess up with the exx instructions
&nbsp;exx
&nbsp;ld a, 1
&nbsp;ld b, 2
&nbsp;ld c, 3
&nbsp;ld d, 4
&nbsp;ld e, 5
&nbsp;exx

&nbsp;;&nbsp; -- [install interrupt handler here] --
&nbsp;
&nbsp;ei&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; enable interrupts again
&nbsp;im 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; IM 2
&nbsp;
int_start:

&nbsp;ex af,af'
&nbsp;exx

&nbsp;; now a=1, b=2, c=3, d=4, e=5. Cool, ehh?
&nbsp;.
&nbsp;.</PRE>
Just make sure that you dont use the alternate register set at all in your
program, even if you disable the interrupts unless you want to change what
you pass on to the interrupt handler based on a condition in code. This
allows mega optimization because the interrupt handler executes 200 times
per second and no variable init code is needed. Example: suppose you need
a lot of variables cleared in your interrupt handler. You could assign
e in the alternate register set to have a value of 0. Then when the interrupt
routine executes b is now a regular register. Instead of ld b, 0 we could
use ld b, e. That saves 3 clock cycles! And Since only one set of registers
get used once (The alternate registers are used during the interrupt routine,
regular registers are used for regular code), you have a very quick way
to pass parameters and optimize just using this technique.

<P><FONT SIZE=+1>Using XOR to speed up interrupt code</FONT>
<BR>XOR can be used in the interrupt handler. This is an optimization for
both size and speed at the same time. You see if we XOR $3C with $36 (%110110)
then you get $0A. When you XOR $3C with $36 you get $0A. Get it? Now once
these bytes are outputted to Port 0 the address $FC00 and $CA00 are formed.

<P><FONT SIZE=+1>Lightning fast IM 2 library and example</FONT>
<BR><FONT SIZE=-1>Dux Gregis originally designed this fast library, however
I helped him with the interrupt handler, commented almost every line of
the source code, and simplified its design</FONT>

<P>Here is an example of 4-level grayscale demo (graydemo.asm) and a 4-level
grayscale library (blitzgry.h)
<UL>
<LI>
<A HREF="coding/graydemo.asm">Graydemo.asm</A></LI>

<LI>
<A HREF="coding/blitzgry.h">Blitzgry.h</A></LI>
</UL>
All the above code has been commented.. of course! Enjoy!&nbsp;
<BR>
<HR>
<p>
<center>
<script language="JavaScript" type="text/javascript"> <!--
function go() {
	if (document.selecter.select1.options[document.selecter.select1.selectedIndex].value != "none")
		window.top.location = document.selecter.select1.options[document.selecter.select1.selectedIndex].value; }
//--> </script>
<form name="selecter"><select name="select1" size=1>
<option value=none>Our Websites</option>
<option value=none>---------------------------------</option>
<option value="http://www.acz.org">ACZ Frontpage</option>
<option value="http://ti83plus.acz.org">83+ Asm Central</option>
<option value="http://ti86.acz.org">86 Asm Central</option>
<option value="http://ti89.acz.org">89 Asm Central</option>
<option value="http://vti.acz.org">Virtual TI Emulator Site</option>
<option value="http://asmstudio.acz.org">Assembly Studio Site</option>
<option value=none>----------------------------------</option>
<option value="http://brett.acz.org">Brett's Homepage</option>
<option value="http://corey.acz.org">Corey's Homepage</option>
<option value="http://david.acz.org">David's Homepage</option>
<option value="http://dux.acz.org">Dux's Homepage</option>
<option value="http://james.acz.org">James' Homepage</option>
<option value="http://jeremy.acz.org">Jeremy's Homepage</option>
<option value="http://matt.acz.org">Matt's Homepage</option>
<option value="http://rusty.acz.org">Rusty's Homepage</option>
<option value="http://scott.acz.org">Scott's Homepage</option>
<option value=none>----------------------------------</option>
</select>
<input type="button" value="Go" onclick="go()">
</form>
</center>

<p><center>&copy; 1998 - 1999 <A HREF="http://www.acz.org" TARGET="_TOP">ACZ</A></center>
</BODY>
</HTML>
