<HTML><Head>
<TITLE>Z80 Assembler Syntax</TITLE>
<META name="title" content="Thomas Scherrer Z80-Family HomePage">
<META name="keywords" content="Z80,Z180,Z280,Z380,Programming,Hardware,Software,Utilities,FAQ,Support,CPU,assembler,emulators,simulators">
<META name="description" content="Z80, Z180, Z280, Z380, Programming, Hardware, Software, Utilities, FAQ, Support, CPU, assembler">
</Head>
<A HREF="index.htm">
<IMG SRC="gfx/zlogo1.gif" ALT="Z80 Home" HEIGHT=98 WIDTH=198 border=0></A>
<hr>
<H2>Zilog Z80 CPU Assembler Syntax</H2><p>
This page is typed and converted to HTML by <a href="contact.htm">Thomas Scherrer</a><br>
I'm still working on this document, so you can come back later to see it develop..
<hr>
<big>ASM:</big> Is the assembler source code.<br>
<big>OBJ:</big> Is the object code (binary executable).
<hr>
<H2>Select the Mnemonic you want detailed info about:</H2>
<table width=70%><tr>
<td><b>Mnemonic:</b></td><td><b>Description:</b>  </td></tr>
<tr><td><A HREF="z80syntx.htm#ADC">ADC</A></td><td>ADD WITH CARRY</td></tr>
<tr><td><A HREF="z80syntx.htm#ADD">ADD</A></td><td>ADD</td></tr>
<tr><td><A HREF="z80syntx.htm#AND">AND</A></td><td>LOGICAL AND</td></tr>     
<tr><td><A HREF="z80syntx.htm#BIT">BIT</A></td><td>BIT TEST</td></tr>     
<tr><td><A HREF="z80syntx.htm#CALL">CALL</A></td><td>CALL SUB ROUTINE</td></tr>
<tr><td><A HREF="z80syntx.htm#CCF">CCF</A></td><td>COMPLEMENT CARRY FLAG</td></tr>
<tr><td><A HREF="z80syntx.htm#CP">CP</A></td><td>COMPARE</td></tr>
<tr><td><A HREF="z80syntx.htm#CPD">CPD</A></td><td>COMPARE AND DECREMENT</td></tr>
<tr><td><A HREF="z80syntx.htm#CPDR">CPDR</A></td><td>COMPARE DECREMENT AND REPEAT</td></tr>
<tr><td><A HREF="z80syntx.htm#CPI">CPI</A></td><td>COMPARE AND INCREMENT</td></tr>
<tr><td><A HREF="z80syntx.htm#CPIR">CPIR</A></td><td>COMPARE INCREMENT AND REPEAT</td></tr>
<tr><td><A HREF="z80syntx.htm#CPL">CPL</A></td><td>COMPLEMENT ACCUMULATOR</td></tr>
<tr><td><A HREF="z80syntx.htm#DAA">DAA</A></td><td>DECIMAL ADJUST ACCUMULATOR</td></tr>
<tr><td><A HREF="z80syntx.htm#DEC">DEC</A></td><td>DECREMENT</td></tr>
<tr><td><A HREF="z80syntx.htm#DI">DI</A></td><td>DISABLE INTERRUPTS</td></tr>
<tr><td><A HREF="z80syntx.htm#DJNZ">DJNZ</A></td><td>DEC JUMP NON-ZERO</td></tr>
<tr><td><A HREF="z80syntx.htm#EI">EI</A></td><td>ENABLE INTERRUPTS</td></tr>
<tr><td><A HREF="z80syntx.htm#EX">EX</A></td><td>EXCHANGE REGISTER PAIR</td></tr>
<tr><td><A HREF="z80syntx.htm#EXX">EXX</A></td><td>EXCHANGE ALTERNATE REGISTERS</td></tr>
<tr><td><A HREF="z80syntx.htm#HALT">HALT</A></td><td>HALT, WAIT FOR INTERRUPT OR RESET</td></tr>
<tr><td><A HREF="z80syntx.htm#IM">IM</A></td><td>INTERRUPT MODE 0 1 2</td></tr>
<tr><td><A HREF="z80syntx.htm#IN">IN</A></td><td>INPUT FROM PORT</td></tr>
<tr><td><A HREF="z80syntx.htm#INC">INC</A></td><td>INCREMENT</td></tr>
<tr><td><A HREF="z80syntx.htm#IND">IND</A></td><td>INPUT, DEC HL, DEC B</td></tr>
<tr><td><A HREF="z80syntx.htm#INDR">INDR</A></td><td>INPUT, DEC HL, DEC B, REPEAT IF B>0</td></tr>
<tr><td><A HREF="z80syntx.htm#INI">INI</A></td><td>INPUT, INC HL, DEC B</td></tr>
<tr><td><A HREF="z80syntx.htm#INIR">INIR</A></td><td>INPUT, INC HL, DEC B, REPEAT IF B>0</td></tr>
<tr><td><A HREF="z80syntx.htm#JP">JP</A></td><td>JUMP</td></tr>
<tr><td><A HREF="z80syntx.htm#JR">JR</A></td><td>JUMP RELATIVE</td></tr>
<tr><td><A HREF="z80syntx.htm#LD">LD</A></td><td>LOAD DATA TO/FROM REGISTERS/MEMORY</td></tr>
<tr><td><A HREF="z80syntx.htm#LDD">LDD</A></td><td>LOAD DECREMENT</td></tr>
<tr><td><A HREF="z80syntx.htm#LDDR">LDDR</A></td><td>LOAD DECREMENT AND REPEAT</td></tr>
<tr><td><A HREF="z80syntx.htm#LDI">LDI</A></td><td>LOAD AND INCREMENT</td></tr>
<tr><td><A HREF="z80syntx.htm#LDIR">LDIR</A></td><td>LOAD INCREMENT AND REPEAT</td></tr>
<tr><td><A HREF="z80syntx.htm#NEG">NEG</A></td><td>NEGATE ACCUMULATOR 2'S COMPLEMENT</td></tr>
<tr><td><A HREF="z80syntx.htm#NOP">NOP</A></td><td>NO OPERATION</td></tr>
<tr><td><A HREF="z80syntx.htm#OR">OR</A></td><td>--</td></tr>
<tr><td><A HREF="z80syntx.htm#OTDR">OTDR</A></td><td>OUTPUT, DEC HL, DEC B, REPEAT IF B>0</td></tr>
<tr><td><A HREF="z80syntx.htm#OTIR">OTIR</A></td><td>OUTPUT, INC HL, DEC B, REPEAT IF B>0</td></tr>
<tr><td><A HREF="z80syntx.htm#OUT">OUT</A></td><td>OUTPUT TO PORT</td></tr>
<tr><td><A HREF="z80syntx.htm#OUTD">OUTD</A></td><td>OUTPUT, DEC HL, DEC B</td></tr>
<tr><td><A HREF="z80syntx.htm#OUTI">OUTI</A></td><td>OUTPUT, INC HL, DEC B</td></tr>
<tr><td><A HREF="z80syntx.htm#POP">POP</A></td><td>POP FROM STACK</td></tr>
<tr><td><A HREF="z80syntx.htm#PUSH">PUSH</A></td><td>PUSH INTO STACK</td></tr>
<tr><td><A HREF="z80syntx.htm#RES">RES</A></td><td>RESET BIT</td></tr>
<tr><td><A HREF="z80syntx.htm#RET">RET</A></td><td>RETURN FROM SUB ROUTINE</td></tr>
<tr><td><A HREF="z80syntx.htm#RETI">RETI</A></td><td>RETURN FROM INTERRUPT</td></tr>
<tr><td><A HREF="z80syntx.htm#RETN">RETN</A></td><td>RETURN FROM NON MASKABEL INTERRUPT</td></tr>
<tr><td><A HREF="z80syntx.htm#RL">RL</A></td><td>ROTATE LEFT register</td></tr>
<tr><td><A HREF="z80syntx.htm#RLA">RLA</A></td><td>ROTATE LEFT ACUMULATOR</td></tr>
<tr><td><A HREF="z80syntx.htm#RLC">RLC</A></td><td>ROTATE LEFT THROUGH CARRY register</td></tr>
<tr><td><A HREF="z80syntx.htm#RLCA">RLCA</A></td><td>ROTATE LEFT THROUGH CARRY ACCUMULATUR</td></tr>
<tr><td><A HREF="z80syntx.htm#RLD">RLD</A></td><td>ROTATE LEFT DIGIT</td></tr>
<tr><td><A HREF="z80syntx.htm#RR">RR</A></td><td>ROTATE RIGHT register</td></tr>
<tr><td><A HREF="z80syntx.htm#RRA">RRA</A></td><td>ROTATE RIGHT ACCUMULATOR</td></tr>
<tr><td><A HREF="z80syntx.htm#RRC">RRC</A></td><td>ROTATE RIGHT CIRCULAR register</td></tr>
<tr><td><A HREF="z80syntx.htm#RRCA">RRCA</A></td><td>ROTATE RIGHT CIRCULAR ACCUMULATOR</td></tr>
<tr><td><A HREF="z80syntx.htm#RRD">RRD</A></td><td>ROTATE RIGHT DIGIT</td></tr>
<tr><td><A HREF="z80syntx.htm#RST">RST</A></td><td>RESTART</td></tr>
<tr><td><A HREF="z80syntx.htm#SBC">SBC</A></td><td>SUBTRACT WITH CARRY</td></tr>
<tr><td><A HREF="z80syntx.htm#SCF">SCF</A></td><td>SET CARRY FLAG</td></tr>
<tr><td><A HREF="z80syntx.htm#SET">SET</A></td><td>SET BIT</td></tr>
<tr><td><A HREF="z80syntx.htm#SLA">SLA</A></td><td>SHIFT LEFT ARITHMETIC register</td></tr>
<tr><td><A HREF="z80syntx.htm#SRA">SRA</A></td><td>SHIFT RIGHT ARITHMETIC register</td></tr>
<tr><td><A HREF="z80syntx.htm#SRL">SRL</A></td><td>SHIFT RIGHT LOGICAL register</td></tr> 
<tr><td><A HREF="z80syntx.htm#SUB">SUB</A></td><td>SUBTRACTION</td></tr>
<tr><td><A HREF="z80syntx.htm#XOR">XOR</A></td><td>EXCLUSIVE OR</td></tr>
</table>




<H2><a name="ADC">
<hr size=10 noshade>
Detailed info <big>ADC</big></H2><p>
ADD WITH CARRY

<H2><a name="ADD">
<hr size=10 noshade>
Detailed info <big>ADD</big></H2><p>

<H2><a name="AND">
<hr size=10 noshade>
Detailed info <big>AND</big></H2><p>
LOGICAL AND

<H2><a name="BIT">
<hr size=10 noshade>
Detailed info <big>BIT</big></H2><p>
BIT TEST

<H2><a name="CALL">
<hr size=10 noshade>
Detailed info <big>CALL</big></H2><p>
CALL a subroutine


<H2><a name="CCF">
<hr size=10 noshade>
Detailed info <big>CCF</big></H2><p>
Opperation: CY = Inv CY<br><p>

<big>Instruction Format:</big><p>
      Opcode: CCF<br>
      OBJ: 3Fh <br> <p>
<big>Description:</big><p>
The Carry flag in the flags register is inverted.<br><p>
Tstates: 4.<br><p>
<big><b>Flags:</big></b>
<dd><big>S:</big>   Not affected.<br>
<dd><big>Z:</big>   Not affected.<br>
<dd><big>H:</big>   Previous carry will be copied to H.<br>
<dd><big>P/V:</big> Not affected.<br>
<dd><big>N:</big>   Reset.<br>
<dd><big>C:</big>   Set if carry was 0 before operation, reset otherwise.<br><p>

<H2><a name="CP">
<hr size=10 noshade>
Detailed info <big>CP</big></H2><p>
COMPARE 

<H2><a name="CPD">
<hr size=10 noshade>
Detailed info <big>CPD</big></H2><p>
COMPARE AND DECREMENT

<H2><a name="CPDR">
<hr size=10 noshade>
Detailed info <big>CPDR</big></H2><p>
COMPARE DECREMENT AND REPEAT<pre>

<img src="gfx/z-cpdr.gif" border=0 width=202 height=172>

Flags: CY Z  PV S  N  H 
       .  ~  ~  ~  1  ~ (~ = changes, . = no change)

And the flags: if byte found: Z=1; HL - address of next byte;
                                   BC - figure out by yourself.
                   not found: Z=0

<H2><a name="CPI">
<hr size=10 noshade>
Detailed info <big>CPI</big></H2><p>
COMPARE AND INCREMENT

<H2><a name="CPIR">
<hr size=10 noshade>
Detailed info <big>CPIR</big></H2><p>
COMPARE INCREMENT AND REPEAT<pre>

<img src="gfx/z-cpir.gif" border=0 width=202 height=172>

Flags: CY Z  PV S  N  H 
       .  ~  ~  ~  1  ~ (~ = changes, . = no change)

And the flags: if byte found: Z=1; HL - address of next byte;
                                   BC - figure out by yourself.
                   not found: Z=0
I believe, that if on exit BC=0 then PV=0 else PV=1, that's so with CPI
(CPD) command, so why shouldn't it be with CPIR (CPDR)?

So the difference between if a byte, is or is not found, is expressed
by the Zero flag. Sorry, don't know exactly how are S and H affected...

</pre>

<H2><a name="CPL">
<hr size=10 noshade>
Detailed info <big>CPL</big></H2><p>
COMPLEMENT ACCUMULATOR

<H2><a name="DAA">
<hr size=10 noshade>
Detailed info <big>DAA</big></H2>
<big>Instruction Format:</big><p>
<pre>
OPCODE                    CYCLES
--------------------------------
  27h                       4


Description:
This instruction conditionally adjusts the accumulator for BCD addition
and subtraction operations. For addition (ADD, ADC, INC) or subtraction
(SUB, SBC, DEC, NEC), the following table indicates the operation performed:

--------------------------------------------------------------------------------
|           | C Flag  | HEX value in | H Flag | HEX value in | Number  | C flag|
| Operation | Before  | upper digit  | Before | lower digit  | added   | After |
|           | DAA     | (bit 7-4)    | DAA    | (bit 3-0)    | to byte | DAA   |
|------------------------------------------------------------------------------|
|           |    0    |     0-9      |   0    |     0-9      |   00    |   0   |
|   ADD     |    0    |     0-8      |   0    |     A-F      |   06    |   0   |
|           |    0    |     0-9      |   1    |     0-3      |   06    |   0   |
|   ADC     |    0    |     A-F      |   0    |     0-9      |   60    |   1   |
|           |    0    |     9-F      |   0    |     A-F      |   66    |   1   |
|   INC     |    0    |     A-F      |   1    |     0-3      |   66    |   1   |
|           |    1    |     0-2      |   0    |     0-9      |   60    |   1   |
|           |    1    |     0-2      |   0    |     A-F      |   66    |   1   |
|           |    1    |     0-3      |   1    |     0-3      |   66    |   1   |
|------------------------------------------------------------------------------|
|   SUB     |    0    |     0-9      |   0    |     0-9      |   00    |   0   |
|   SBC     |    0    |     0-8      |   1    |     6-F      |   FA    |   0   |
|   DEC     |    1    |     7-F      |   0    |     0-9      |   A0    |   1   |
|   NEG     |    1    |     6-F      |   1    |     6-F      |   9A    |   1   |
|------------------------------------------------------------------------------|

</pre>
<big><b>Flags:</big></b>
<dd><big>C:</big>   See instruction.<br>
<dd><big>N:</big>   Unaffected.<br>
<dd><big>P/V:</big> Set if Acc. is even parity after operation, reset otherwise.<br>
<dd><big>H:</big>   See instruction.<br>
<dd><big>Z:</big>   Set if Acc. is Zero after operation, reset otherwise.<br>
<dd><big>S:</big>   Set if most significant bit of Acc. is 1 after operation, reset otherwise.<br>
<pre>

<big><b>Example:</big></b>

If an addition operation is performed between 15 (BCD) and 27 (BCD), simple decimal
arithmetic gives this result:

    15
   +27
   ----
    42

But when the binary representations are added in the Accumulator according to
standard binary arithmetic:

   0001 0101  15
  +0010 0111  27
  ---------------
   0011 1100  3C

The sum is ambiguous. The DAA instruction adjusts this result so that correct
BCD representation is obtained:

   0011 1100  3C result
  +0000 0110  06 +error
  ---------------
   0100 0010  42 Correct BCD!
</pre>


<H2><a name="DEC">
<hr size=10 noshade>
Detailed info <big>DEC</big></H2><p>
DECREMENT

<H2><a name="DI">
<hr size=10 noshade>
Detailed info <big>DI</big></H2><p>
DISABLE INTERRUPTS

<H2><a name="DJNZ">
<hr size=10 noshade>
Detailed info <big>DJNZ</big></H2><p>
DEC JUMP NON-ZERO

<H2><a name="EI">
<hr size=10 noshade>
Detailed info <big>EI</big></H2><p>
ENABLE INTERRUPTS

<H2><a name="EX">
<hr size=10 noshade>
Detailed info <big>EX</big></H2><p>
EXCHANGE REGISTER PAIR<p>
<pre>
<B>
ASM: EX  DE,HL
OBJ: EBh
</b>Tstates : 4.<P><b>

ASM: EX  AF,AF'
OBJ: 08h
</b>Tstates : 4.<P>

Description:
The 16bit value in the two registers are exchanged.
note: register pair AF consists of register A and the flags register F

<b>
ASM: EX  (SP),HL
OBJ: E3h
</b>Tstates : 19.<P>

Description:
The low order byte contained in register pait HL is exchanged with the contents
of the memory address spefified by the contents of register pair SP (Stack Pointer),
and the high order byte of HL is exchanges with the next highest memory address (SP+1).
H <-> (SP+1) , L <-> (SP)  this will not affect the contents of SP.

<b>
ASM: EX  (SP),IX
OBJ: DDh, E3h
</b>Tstates : 23.<P>

<b>
ASM: EX  (SP),IY
OBJ: FDh, E3h
</b>Tstates : 23.<P>

Description:
Does the same as above.
eg:  IXH <-> (SP+1), IXL <-> (SP)  IXH = IX height byte, IXL = IX low byte..
</pre>

<H2><a name="EXX">
<hr size=10 noshade>
Detailed info <big>EXX</big></H2><p>
EXCHANGE ALTERNATE REGISTERS
<pre>
<B>
ASM: EXX
OBJ: D9h
</b>Tstates : 4.<P>

Description:
Each 16bit value in register pairs BC, DE, HL is exchanged with the 16bit value in BC', DE', HL' respectively.
eg:
BC <-> BC'
DE <-> DE'
HL <-> HL' 

</pre>

<H2><a name="HALT">
<hr size=10 noshade>
Detailed info <big>HALT</big></H2><p>
HALT, WAIT FOR INTERRUPT OR RESET
<pre>
<B>
ASM: HALT
OBJ: 76h
</b>Tstates : 4.<P>

Description:
The HALT instruction suspends CPU operation until a interrupt or reset is received.
While in the halted state, the processor will execute NOP's to maintain memory refresh logic.

</pre>

<H2><a name="IM">
<hr size=10 noshade>
Detailed info <big>IM</big></H2><p>
INTERRUPT MODE 0 1 2

<H2><a name="IN">
<hr size=10 noshade>
Detailed info <big>IN</big></H2><p>
INPUT FROM PORT

<H2><a name="INC">
<hr size=10 noshade>
Detailed info <big>INC</big></H2><p>
INCREMENT

<H2><a name="IND">
<hr size=10 noshade>
Detailed info <big>IND</big></H2>
<big>Instruction Format:</big><p>
<pre>
OPCODE        CYCLES
-------------------------------
 ED  AA         16 

Description:
The contents of register C are placed on the bottom half (A0-A7) of the address
bus to select the I/O device. Register B may be used as a byte counter, and its
contents are placed on the top half (A8-A15) af the address bus at this time.
Then one byte from the selected port is placed on the data bus and written to the
CPU. The contents of the HL register pair are pointer to store the redden byte
in memory. The register pair HL is decremented, the byte counter B is decremented.
</pre>

<big><b>Flags:</big></b>
<dd><big>C:</big>   Not affected.<br>
<dd><big>N:</big>   Set.<br>
<dd><big>P/V:</big> UnKnown.<br>
<dd><big>H:</big>   UnKnown.<br>
<dd><big>Z:</big>   Set if B-1=0, reset otherwise.<br>
<dd><big>S:</big>   UnKnown.<br>
<p><BR>
<pre>

<big><b>Example:</big></b>

Reg C=07h
Reg B=10h
Reg HL=1000h
IO port nr. 07h contain data 7Bh

Then after the execution of
<big><b>IND</big></b>
The HL register pair will contain 0FFFh, and register B will contain 0Fh,
and memory location 1000h will contain 7Bh.
</pre>

<H2><a name="INDR">
<hr size=10 noshade>
Detailed info <big>INDR</big></H2>
<big>Instruction Format:</big><p>
<pre>
OPCODE                   CYCLES
--------------------------------------------
 ED  BA         16 if B=0    21 if B >< 0

Description:
The contents of register C are placed on the bottom half (A0-A7) of the address
bus to select the I/O device. Register B is used as a byte counter, and its
contents are placed on the top half (A8-A15) af the address bus at this time.
Then one byte from the selected port is placed on the data bus and written to the
CPU. The contents of the HL register pair are pointer to store the redden byte
in memory. The register pair HL is decremented, the byte counter B is decremented.
If decrementing causes B to go to zero, the instruction is terminated. If B is not
zero, the instruction is repeated.
</pre>

<big><b>Flags:</big></b>
<dd><big>C:</big>   Not affected.<br>
<dd><big>N:</big>   Set.<br>
<dd><big>P/V:</big> UnKnown.<br>
<dd><big>H:</big>   UnKnown.<br>
<dd><big>Z:</big>   Set.<br>
<dd><big>S:</big>   UnKnown.<br>
<p><BR>
<pre>

<big><b>Example:</big></b>

Reg C=07h
Reg B=03h
Reg HL=1000h
IO port nr. 07h contain data 51h, A9h, 03h

Then after the execution of
<big><b>INDR</big></b>
The HL register pair will contain 0FFDh, and register B will contain zero,
and memory locations will have contents as follows:

Location:    Contents:
0FFEh        03h
0FFFh        A9h
1000h        51h
</pre>




<H2><a name="INI">
<hr size=10 noshade>
Detailed info <big>INI</big></H2>
<big>Instruction Format:</big><p>
<pre>
OPCODE        CYCLES
---------------------
 ED  A2         16


Description:
The contents of register C are placed on the bottom half (A0-A7) of the address
bus to select the I/O device. Register B may be used as a byte counter, and its
contents are placed on the top half (A8-A15) af the address bus at this time.
Then one byte from the selected port is placed on the data bus and written to the
CPU. The contents of the HL register pair are pointer to store the redden byte
in memory. Finally the byte counter B is decremented and register pair HL is incremented.

</pre>
<big><b>Flags:</big></b>
<dd><big>C:</big>   Not affected.<br>
<dd><big>N:</big>   Set.<br>
<dd><big>P/V:</big> UnKnown.<br>
<dd><big>H:</big>   UnKnown.<br>
<dd><big>Z:</big>   Set if B-1=0, reset otherwise.<br>
<dd><big>S:</big>   UnKnown.<br>
<p><BR>
<pre>

<big><b>Example:</big></b>

Reg C=07h
Reg B=12h
Reg HL=1000h
IO port nr. 07h contain data 7Bh

Then after the execution of
<big><b>INI</big></b>
Memory location 1000h will contain 7Bh, the HL register pair will contain
1001h, and register B will contain 11h.
</pre>

<H2><a name="INIR">
<hr size=10 noshade>
Detailed info <big>INIR</big></H2>
<big>Instruction Format:</big><p>
<pre>
OPCODE                   CYCLES
--------------------------------------------
 ED  B2         16 if B=0    21 if B >< 0

Description:
The contents of register C are placed on the bottom half (A0-A7) of the address
bus to select the I/O device. Register B is used as a byte counter, and its
contents are placed on the top half (A8-A15) af the address bus at this time.
Then one byte from the selected port is placed on the data bus and written to the
CPU. The contents of the HL register pair are pointer to store the redden byte
in memory. The register pair HL is incremented, the byte counter B is decremented.
If decrementing causes B to go to zero, the instruction is terminated. If B is not
zero, the instruction is repeated.
</pre>
<big><b>Flags:</big></b>
<dd><big>C:</big>   Not affected.<br>
<dd><big>N:</big>   Set.<br>
<dd><big>P/V:</big> UnKnown.<br>
<dd><big>H:</big>   UnKnown.<br>
<dd><big>Z:</big>   Set.<br>
<dd><big>S:</big>   UnKnown.<br>
<p><BR>
<pre>

<big><b>Example:</big></b>

Reg C=07h
Reg B=03h
Reg HL=1000h
IO port nr. 07h contain data 51h, A9h, 03h

Then after the execution of
<big><b>INIR</big></b>
The HL register pair will contain 1003h, and register B will contain zero,
and memory locations will have contents as follows:

Location:    Contents:
1000h        51h
1001h        A9h
1002h        03h
</pre>


<H2><a name="JP">
<hr size=10 noshade>
Detailed info <big>JP</big></H2><p>
JUMP to address.

<H2><a name="JR">
<hr size=10 noshade>
Detailed info <big>JR</big></H2><p>
JUMP to address, Relative


<H2><a name="LD">
<hr size=10 noshade>
Detailed info <big>LD</big></H2>
<big>Instruction Format:</big><p>
<pre>
OPCODE  r    r'                             CYCLES
----------------------------------------------------
  01   ddd  sss     LD   r,r'    dst,src      4


Introductory note -- Binary form of opcodes

  Example:   LD r,r'
 
The 8-bit binary opcode is

        r  r'
     01dddsss
 
   ...where "ddd" is a three-bit field specifying the destination,
  and "sss" is a three-bit field specifying the source.
 
the value for ddd and sss is shown below:

Registers
--------------
 A = 111
 B = 000
 C = 001
 D = 010
 E = 011
 H = 100
 L = 101
</pre>
<p><br>
<big>Operation: dst <-- src </big><p>
The contest of the source operand are loaded into the destination operand. The contents of the source operand are not affected.<p>
<br>
<big><b>Flags:</big></b><br>
<dd><big>C:</big>   Unaffected.<br>
<dd><big>N:</big>   Unaffected.<br>
<dd><big>P/V:</big> Unaffected.<br>
<dd><big>H:</big>   Unaffected.<br>
<dd><big>Z:</big>   Unaffected.<br>
<dd><big>S:</big>   Unaffected.<br>
<p><BR>
<hr>
<big>Example: </big>If register E, contains the value 10h, The statement:<p><big>
ASM:    LD      H,E<br>
OBJ:    63h<p></big>
Loads the value 10H into register H.



<H2><a name="LDD">
<hr size=10 noshade>
Detailed info <big>LDD</big></H2>
<big>Instruction Format:</big><p>
<pre>
OPCODE          CYCLES
-----------------------------
 ED  A8           16 

Description:
This instruction transfers a byte of data from memory location addressed
by the register pair HL, to the memory location addressed by the register pair DE.
Then both af these register pairs including the BC (byte counter) register pair
are decremented.
</pre>

<big><b>Flags:</big></b>
<dd><big>C:</big>   Not affected.<br>
<dd><big>N:</big>   reset.<br>
<dd><big>P/V:</big> Set if BC-1 is not 0, reset otherwise.<br>
<dd><big>H:</big>   Reset.<br>
<dd><big>Z:</big>   Not affected.<br>
<dd><big>S:</big>   Not affected.<br>




<H2><a name="LDDR">
<hr size=10 noshade>
Detailed info <big>LDDR</big></H2>
<big>Instruction Format:</big><p>
<pre>
OPCODE          CYCLES
-----------------------------
 ED  A8           16 

Description:
This instruction transfers a byte of data from memory location addressed
by the register pair HL, to the memory location addressed by the register pair DE.
Then both af these register pairs including the BC (byte counter) register pair
are decremented.
</pre>
<big><b>Flags:</big></b>
<dd><big>C:</big>   Not affected.<br>
<dd><big>N:</big>   reset.<br>
<dd><big>P/V:</big> Set if BC-1 is not 0, reset otherwise.<br>
<dd><big>H:</big>   Reset.<br>
<dd><big>Z:</big>   Not affected.<br>
<dd><big>S:</big>   Not affected.<br>


<H2><a name="LDI">
<hr size=10 noshade>
Detailed info <big>LDI</big></H2><p>
LOAD AND INCREMENT

<H2><a name="LDIR">
<hr size=10 noshade>
Detailed info <big>LDIR</big></H2><p>
LOAD INCREMENT AND REPEAT

<H2><a name="NEG">
<hr size=10 noshade>
Detailed info <big>NEG</big></H2><p>
NEGATE ACCUMULATOR 2'S COMPLEMENT

<H2><a name="NOP">
<hr size=10 noshade>
Detailed info <big>NOP</big></H2><p>
NO OPERATION, not the most complicated instruction :-)

<H2><a name="OR">
<hr size=10 noshade>
Detailed info <big>OR</big></H2><p>

<H2><a name="OTDR">
<hr size=10 noshade>
Detailed info <big>OTDR</big></H2><p>
OUTPUT, DEC HL, DEC B, REPEAT IF B>0

<H2><a name="OTIR">
<hr size=10 noshade>
Detailed info <big>OTIR</big></H2><p>
OUTPUT, INC HL, DEC B, REPEAT IF B>0

<H2><a name="OUT">
<hr size=10 noshade>
Detailed info <big>OUT</big></H2><p>
OUTPUT TO PORT

<H2><a name="OUTD">
<hr size=10 noshade>
Detailed info <big>OUTD</big></H2><p>
OUTPUT, DEC HL, DEC B

<H2><a name="OUTI">
<hr size=10 noshade>
Detailed info <big>OUTI</big></H2><p>
OUTPUT, INC HL, DEC B

<H2><a name="POP">
<hr size=10 noshade>
Detailed info <big>POP</big></H2><p>
POP FROM STACK

<H2><a name="PUSH">
<hr size=10 noshade>
Detailed info <big>PUSH</big></H2><p>
PUSH INTO STACK

<H2><a name="RES">
<hr size=10 noshade>
Detailed info <big>RES</big></H2><p>
RESET BIT

<H2><a name="RET">
<hr size=10 noshade>
Detailed info <big>RET</big></H2><p>
RETURN FROM SUB ROUTINE

<H2><a name="RETI">
<hr size=10 noshade>
Detailed info <big>RETI</big></H2><p>
RETURN FROM INTERRUPT

<H2><a name="RETN">
<hr size=10 noshade>
Detailed info <big>RETN</big></H2><p>
<td>RETURN FROM NON MASKABEL INTERRUPT

<H2><a name="RL">
<hr size=10 noshade>
Detailed info <big>RL</big></H2>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zrl.gif"><br>
<P>
<B>
ASM: RL B<BR>
OBJ: CBh, 10h<br>
</b>Tstates : 8.<P><b>

ASM: RL C<BR>
OBJ: CBh, 11h<br>
</b>Tstates : 8.<P><b>

ASM: RL D<BR>
OBJ: CBh, 12h<br>
</b>Tstates : 8.<P><b>

ASM: RL E<BR>
OBJ: CBh, 13h<br>
</b>Tstates : 8.<P><b>

ASM: RL H<BR>
OBJ: CBh, 14h<br>
</b>Tstates : 8.<P><b>

ASM: RL L<BR>
OBJ: CBh, 15h<br>
</b>Tstates : 8.<P><b>

ASM: RL A<BR>
OBJ: CBh, 17h<br>
</b>Tstates : 8.<P><b>

ASM: RL (HL)<BR>
OBJ: CBh, 16h<br>
</b>Tstates : 15.<P><b>

ASM: RL (IX+D)<BR>
OBJ: DDh, CBh, XX, 16h<br>
</b>Tstates : 23.<P><b>

ASM: RL (IY+D)<BR>
OBJ: FDh, CBh, XX, 16h<br>
</b>Tstates : 23.<P>
XX is the offset value.


<H2><a name="RLA">
<hr size=10 noshade>
Detailed info <big>RLA</big></H2>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zrl.gif"><br>
<P>
<B>
ASM: RLA<br>
OBJ: 17h<br>
</b>Tstates : 4.<P>


<H2><a name="RLC">
<hr size=10 noshade>
Detailed info <big>RLC</big></H2>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zrlc.gif"><br>
<P>
<B>
ASM: RLC B<BR>
OBJ: CBh, 00h<br>
</b>Tstates : 8.<P><b>

ASM: RLC C<BR>
OBJ: CBh, 01h<br>
</b>Tstates : 8.<P><b>

ASM: RLC D<BR>
OBJ: CBh, 02h<br>
</b>Tstates : 8.<P><b>

ASM: RLC E<BR>
OBJ: CBh, 03h<br>
</b>Tstates : 8.<P><b>

ASM: RLC H<BR>
OBJ: CBh, 04h<br>
</b>Tstates : 8.<P><b>

ASM: RLC L<BR>
OBJ: CBh, 05h<br>
</b>Tstates : 8.<P><b>

ASM: RLC A<BR>
OBJ: CBh, 07h<br>
</b>Tstates : 8.<P><b>

ASM: RLC (HL)<BR>
OBJ: CBh, 06h<br>
</b>Tstates : 15.<P><b>

ASM: RLC (IX+D)<BR>
OBJ: DDh, CBh, XX, 06h<br>
</b>Tstates : 23.<P><b>

ASM: RLC (IY+D)<BR>
OBJ: FDh, CBh, XX, 06h<br>
</b>Tstates : 23.<P>
XX is the offset value.



<H2><a name="RLCA">
<hr size=10 noshade>
Detailed info <big>RLCA</big></H2>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zrlc.gif"><br>
<P>
<B>
ASM: RLCA<br>
OBJ: 07h<br>
</b>Tstates : 4.<P>


<H2><a name="RLD">
<hr size=10 noshade>
Detailed info <big>RLD</big></H2>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zrld.gif"><br>
<P>
<B>
ASM: RLD<br>
OBJ: EDh, 6Fh<br>
</b>Tstates : 18.<P>


<H2><a name="RR">
<hr size=10 noshade>
Detailed info <big>RR</big></H2>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zrra.gif"><br>
<P>
<B>
ASM: RR B<BR>
OBJ: CBh, 18h<br>
</b>Tstates : 8.<P><b>

ASM: RR C<BR>
OBJ: CBh, 19h<br>
</b>Tstates : 8.<P><b>

ASM: RR D<BR>
OBJ: CBh, 1Ah<br>
</b>Tstates : 8.<P><b>

ASM: RR E<BR>
OBJ: CBh, 1Bh<br>
</b>Tstates : 8.<P><b>

ASM: RR H<BR>
OBJ: CBh, 1Ch<br>
</b>Tstates : 8.<P><b>

ASM: RR L<BR>
OBJ: CBh, 1Dh<br>
</b>Tstates : 8.<P><b>

ASM: RR A<BR>
OBJ: CBh, 1Fh<br>
</b>Tstates : 8.<P><b>

ASM: RR (HL)<BR>
OBJ: CBh, 1Eh<br>
</b>Tstates : 15.<P><b>

ASM: RR (IX+D)<BR>
OBJ: DDh, CBh, XX, 1Eh<br>
</b>Tstates : 23.<P><b>

ASM: RR (IY+D)<BR>
OBJ: FDh, CBh, XX, 1Eh<br>
</b>Tstates : 23.<P>
XX is the offset value.


<H2><a name="RRA">
<hr size=10 noshade>
Detailed info <big>RRA</big></H2>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zrra.gif"><br>
<P>
<B>
ASM: RRA<br>
OBJ: 1Fh<br>
</b>Tstates : 4.<P>



<H2><a name="RRC">
<hr size=10 noshade>
Detailed info <big>RRC</big></H2>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zrrc.gif"><br>
<P>
<B>
ASM: RRC B<BR>
OBJ: CBh, 08h<br>
</b>Tstates : 8.<P><b>

ASM: RRC C<BR>
OBJ: CBh, 09h<br>
</b>Tstates : 8.<P><b>

ASM: RRC D<BR>
OBJ: CBh, 0Ah<br>
</b>Tstates : 8.<P><b>

ASM: RRC E<BR>
OBJ: CBh, 0Bh<br>
</b>Tstates : 8.<P><b>

ASM: RRC H<BR>
OBJ: CBh, 0Ch<br>
</b>Tstates : 8.<P><b>

ASM: RRC L<BR>
OBJ: CBh, 0Dh<br>
</b>Tstates : 8.<P><b>

ASM: RRC A<BR>
OBJ: CBh, 0Fh<br>
</b>Tstates : 8.<P><b>

ASM: RRC (HL)<BR>
OBJ: CBh, 0Eh<br>
</b>Tstates : 15.<P><b>

ASM: RRC (IX+D)<BR>
OBJ: DDh, CBh, XX, 0Eh<br>
</b>Tstates : 23.<P><b>

ASM: RRC (IY+D)<BR>
OBJ: FDh, CBh, XX, 0Eh<br>
</b>Tstates : 23.<P>
XX is the offset value.



<H2><a name="RRCA">
<hr size=10 noshade>
Detailed info <big>RRCA</big></H2>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zrrc.gif"><br>
<P>
<B>
ASM: RRCA<br>
OBJ: 0Fh<br>
</b>Tstates : 4.<P>

<H2><a name="RRD">
<hr size=10 noshade>
Detailed info <big>RRD</big></H2>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zrrd.gif"><br>
ROTATE RIGHT DIGIT<P>
<B>
ASM: RRD<br>
OBJ: EDh, 67h<br>
</b>Tstates : 18.<P>

<H2><a name="RST">
<hr size=10 noshade>
Detailed info <big>RST</big></H2>
<big>Instruction Format:</big><p>
<pre>
OPCODE   CALL ADDRESS   MNEMONIC    CYCLES
----------------------------------------------------
  C7h    0000h          RST 0
  CFh    0008h          RST 8
  D7h    0010h          RST 16
  DFh    0018h          RST 24
  E7h    0020h          RST 32
  EFh    0028h          RST 40
  F7h    0030h          RST 48
  FFh    0038h          RST 56
</PRE>

<H2><a name="SBC">
<hr size=10 noshade>
Detailed info <big>SBC</big></H2><p>
SUBTRACT WITH CARRY



<H2><a name="SCF">
<hr size=10 noshade>
Detailed info <big>SCF</big></H2><p>
Opperation: CY = 1<br><p>

<big>Instruction Format:</big><p>
      Opcode: SCF<br>
      OBJ: 37h <br> <p>
<big>Description:</big><p>
The Carry flag in the flags register is set (1).<br><p>
Tstates: 4.<br><p>
<big><b>Flags:</big></b>
<dd><big>S:</big>   Not affected.<br>
<dd><big>Z:</big>   Not affected.<br>
<dd><big>H:</big>   Reset<br>
<dd><big>P/V:</big> Not affected.<br>
<dd><big>N:</big>   Reset.<br>
<dd><big>C:</big>   Set<br><p>


<H2><a name="SET">
<hr size=10 noshade>
Detailed info <big>SET b, r</big></H2>
Operation:  rb = 1<br>

<big>Instruction Format:</big><p>

<IMG ALIGN=top SRC="gfx/zset_br.gif"> CBh<br><p>

Bit b in register r is set. Operands b and r are specified as follows:<br>

<pre>
Bit   b        Register   r
 0   000          B      000
 1   001          C      001
 2   010          D      010 
 3   011          E      011
 4   100          H      100 
 5   101          L      101
 6   110          A      111
 7   111
</pre>
Tstates: 8.<br>
<big><b>Flags:</big></b> None Affected<br><p>
<big>Example: </big><br>
ASM:    SET 3,D<br>
OBJ:    CBh, DAh<p></big>

<hr width=80%><H2>
Detailed info <big>SET b, (HL)</big></H2>
Operation:  (HL)b = 1<br>

<big>Instruction Format:</big><p>

<IMG ALIGN=top SRC="gfx/zset_bhl.gif"> CBh<br><p>

Bit b in the memory location addressed by the contents of register pair HL is set. Operands b is specified as follows:<br>

<pre>
Bit   b
 0   000
 1   001
 2   010 
 3   011
 4   100 
 5   101
 6   110
 7   111
</pre>

Tstates: 15.<br>
<big><b>Flags:</big></b> None Affected<br><p>
<big>Example: </big><br>
ASM:    SET 5,(HL)<br>
OBJ:    CBh, EEh<p></big>
<hr width=80%>
<H2>
Detailed info <big>SET b, (IX+d)</big></H2>
Operation:  (IX+d)b = 1<br>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zset_bix.gif"> DDh<br>
<IMG ALIGN=top SRC="gfx/zset_bii.gif"> CBh<p>

Bit b is set, in the memory location addressed by the sum of the contents of register IX and the two's complement integer d. (d = adr. offset)<br>
Operands b is specified as follows:<br>

<pre>
Bit   b
 0   000
 1   001
 2   010 
 3   011
 4   100 
 5   101
 6   110
 7   111
</pre>

Tstates: 23.<br>
<big><b>Flags:</big></b> None Affected<br><p>
<big>Example: </big><br>
ASM:    SET 0,(IX+3h)<br>
OBJ:    DDh, CBh, 03h, C6h<p></big><br><p>
If the contents of index Register IX are 2000h, then bit 0 in memory location 2003h will be 1 (set).<br>
Bit 0 is the least significant bit)

<hr width=80%>

<H2>
Detailed info <big>SET b, (IY+d)</big></H2>
Operation:  (IY+d)b = 1<br>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zset_biy.gif"> FDh<br>
<IMG ALIGN=top SRC="gfx/zset_bii.gif"> CBh<p>

Bit b is set, in the memory location addressed by the sum of the contents of register IY and the two's complement integer d. (d = adr. offset)<br>
Operands b is specified as follows:<br>

<pre>
Bit   b
 0   000
 1   001
 2   010 
 3   011
 4   100 
 5   101
 6   110
 7   111
</pre>

Tstates: 23.<br>
<big><b>Flags:</big></b> None Affected<br><p>
<big>Example: </big><br>
ASM:    SET 0,(IY+47h)<br>
OBJ:    DDh, CBh, 47h, C6h<p></big><br><p>
If the contents of index Register IX are 2000h, then bit 0 in memory location 2047h will be 1 (set).<br>
Bit 0 is the least significant bit)


<H2><a name="SLA">
<hr size=10 noshade>
Detailed info <big>SLA</big></H2>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zsla.gif"><br>
<P>
<B>
ASM: SLA B<BR>
OBJ: CBh, 20h<br>
</b>Tstates : 8.<P><b>

ASM: SLA C<BR>
OBJ: CBh, 21h<br>
</b>Tstates : 8.<P><b>

ASM: SLA D<BR>
OBJ: CBh, 22h<br>
</b>Tstates : 8.<P><b>

ASM: SLA E<BR>
OBJ: CBh, 23h<br>
</b>Tstates : 8.<P><b>

ASM: SLA H<BR>
OBJ: CBh, 24h<br>
</b>Tstates : 8.<P><b>

ASM: SLA L<BR>
OBJ: CBh, 25h<br>
</b>Tstates : 8.<P><b>

ASM: SLA A<BR>
OBJ: CBh, 27h<br>
</b>Tstates : 8.<P><b>

ASM: SLA (HL)<BR>
OBJ: CBh, 26h<br>
</b>Tstates : 15.<P><b>

ASM: SLA (IX+D)<BR>
OBJ: DDh, CBh, XX, 26h<br>
</b>Tstates : 23.<P><b>

ASM: SLA (IY+D)<BR>
OBJ: FDh, CBh, XX, 26h<br>
</b>Tstates : 23.<P>
XX is the offset value.


<H2><a name="SRA">
<hr size=10 noshade>
Detailed info <big>SRA</big></H2>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zsra.gif"><br>
<P>
<B>
ASM: SRA B<BR>
OBJ: CBh, 28h<br>
</b>Tstates : 8.<P><b>

ASM: SRA C<BR>
OBJ: CBh, 29h<br>
</b>Tstates : 8.<P><b>

ASM: SRA D<BR>
OBJ: CBh, 2Ah<br>
</b>Tstates : 8.<P><b>

ASM: SRA E<BR>
OBJ: CBh, 2Bh<br>
</b>Tstates : 8.<P><b>

ASM: SRA H<BR>
OBJ: CBh, 2Ch<br>
</b>Tstates : 8.<P><b>

ASM: SRA L<BR>
OBJ: CBh, 2Dh<br>
</b>Tstates : 8.<P><b>

ASM: SRA A<BR>
OBJ: CBh, 2Fh<br>
</b>Tstates : 8.<P><b>

ASM: SRA (HL)<BR>
OBJ: CBh, 2Eh<br>
</b>Tstates : 15.<P><b>

ASM: SRA (IX+D)<BR>
OBJ: DDh, CBh, XX, 2Eh<br>
</b>Tstates : 23.<P><b>

ASM: SRA (IY+D)<BR>
OBJ: FDh, CBh, XX, 2Eh<br>
</b>Tstates : 23.<P>
XX is the offset value.


<H2><a name="SRL">
<hr size=10 noshade>
Detailed info <big>SRL</big></H2>
<big>Instruction Format:</big><p>
<IMG ALIGN=top SRC="gfx/zsrl.gif"><br>
<P>
<B>
ASM: SRL B<BR>
OBJ: CBh, 38h<br>
</b>Tstates : 8.<P><b>

ASM: SRL C<BR>
OBJ: CBh, 39h<br>
</b>Tstates : 8.<P><b>

ASM: SRL D<BR>
OBJ: CBh, 3Ah<br>
</b>Tstates : 8.<P><b>

ASM: SRL E<BR>
OBJ: CBh, 3Bh<br>
</b>Tstates : 8.<P><b>

ASM: SRL H<BR>
OBJ: CBh, 3Ch<br>
</b>Tstates : 8.<P><b>

ASM: SRL L<BR>
OBJ: CBh, 3Dh<br>
</b>Tstates : 8.<P><b>

ASM: SRL A<BR>
OBJ: CBh, 3Fh<br>
</b>Tstates : 8.<P><b>

ASM: SRL (HL)<BR>
OBJ: CBh, 3Eh<br>
</b>Tstates : 15.<P><b>

ASM: SRL (IX+D)<BR>
OBJ: DDh, CBh, XX, 3Eh<br>
</b>Tstates : 23.<P><b>

ASM: SRL (IY+D)<BR>
OBJ: FDh, CBh, XX, 3Eh<br>
</b>Tstates : 23.<P>
XX is the offset value.

<H2><a name="SUB">
<hr size=10 noshade>
Detailed info <big>SUB</big></H2>
Operation:  A = A - s<br>
The s operand is subtracted from the contents of the accumulator, and the result is stored in the Accumulator.<br><p>
<b>
ASM: SUB B<BR>
OBJ: 90h<br>
</b>Tstates : 4.<P><b>
 
ASM: SUB C<BR>
OBJ: 91h<br>
</b>Tstates : 4.<P><b>
 
ASM: SUB D<BR>
OBJ: 92h<br>
</b>Tstates : 4.<P><b>
 
ASM: SUB E<BR>
OBJ: 93h<br>
</b>Tstates : 4.<P><b>
 
ASM: SUB H<BR>
OBJ: 94h<br>
</b>Tstates : 4.<P><b>
 
ASM: SUB L<BR>
OBJ: 95h<br>
</b>Tstates : 4.<P><b>
 
ASM: SUB A<BR>
OBJ: 97h<br>
</b>Tstates : 4.<P><b>
 
ASM: SUB n<BR>
OBJ: D6h, n<br>
</b>Tstates : 7.<P><b>
 
ASM: SUB (HL)<BR>
OBJ: 96h<br>
</b>Tstates : 7.<P><b>
 
ASM: SUB (IX+d)<BR>
OBJ: DDh, 96h, d<br>
</b>Tstates : 19.<P><b>
 
ASM: SUB (IY+d)<BR>
OBJ: FDh, 96h, d<br>
</b>Tstates : 19.<P>
 

<big><b>Flags:</big></b>
<dd><big>S:</big>   Set if result is negative, reset otherwise.<br>
<dd><big>Z:</big>   Set if result is Zero, reset otherwise.<br>
<dd><big>H:</big>   Set if borrow from Bit4, reset otherwise.<br>
<dd><big>P/V:</big> Set if overflow, reset otherwise.<br>
<dd><big>N:</big>   Reset.<br>
<dd><big>C:</big>   Set if borrow, reset otherwise.<br><p>

<big>Example: </big>If Accumulator contains 29h, and register D contains 11h, after the execution of:<p><big>
ASM:    SUB D<br>
OBJ:    92h<p></big>
The Accumulator will contain 18h.

<H2><a name="XOR">
<hr size=10 noshade>
Detailed info <big>XOR</big></H2>
Operation:  A = A xor s<br>
A logical exclusive-OR opperation is performed between the byte specified by the s opperand
and the byte contained in the Accumulator, the result is stored in the Accumulator.<br><p>
<b>
ASM: XOR B<BR>
OBJ: A8h<br>
</b>Tstates : 4.<P><b>

ASM: XOR C<BR>
OBJ: A9h<br>
</b>Tstates : 4.<P><b>

ASM: XOR D<BR>
OBJ: AAh<br>
</b>Tstates : 4.<P><b>

ASM: XOR E<BR>
OBJ: ABh<br>
</b>Tstates : 4.<P><b>

ASM: XOR H<BR>
OBJ: ACh<br>
</b>Tstates : 4.<P><b>

ASM: XOR L<BR>
OBJ: ADh<br>
</b>Tstates : 4.<P><b>

ASM: XOR A<BR>
OBJ: AFh<br>
</b>Tstates : 4.<P><b>

ASM: XOR n<BR>
OBJ: EEh, n<br>
</b>Tstates : 7.<P><b>

ASM: XOR (HL)<BR>
OBJ: AEh<br>
</b>Tstates : 7.<P><b>

ASM: XOR (IX+d)<BR>
OBJ: DDh, AEh, d<br>
</b>Tstates : 19.<P><b>

ASM: XOR (IY+d)<BR>
OBJ: FDh, AEh, d<br>
</b>Tstates : 19.<P>


<big><b>Flags:</big></b>
<dd><big>S:</big>   Set if result is negative, reset otherwise.<br>
<dd><big>Z:</big>   Set if result is Zero, reset otherwise.<br>
<dd><big>H:</big>   Reset.<br>
<dd><big>P/V:</big> Set if parity even, reset otherwise.<br>
<dd><big>N:</big>   Reset.<br>
<dd><big>C:</big>   Reset.<br><p>

<big>Example: </big>If the Accumulator contains 96h (10010110),
and register D contains 5Dh (01011101) , after the execution of:<p><big>
ASM:    XOR D<br>
OBJ:    AAh<p></big>
The Accumulator will contain CBh (11001011).<br>

<hr size=10 noshade>
</body></html>
